name: Build and test rdkit (including the cartridge)

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: 
      labels: ubuntu-latest-16-cores
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Setup build environment
        shell: bash
        run: |
            sudo apt-get update
            sudo apt-get install -y g++ wget make libgl1-mesa-dev mesa-common-dev
            source ${CONDA}/etc/profile.d/conda.sh
            sudo chown -R ${USER} ${CONDA}
            conda config --set always_yes yes --set changeps1 no
            conda update -q conda
            conda info -a
            conda create --name rdkit_build $(python) cmake \
                boost-cpp=1.71.0 \
                py-boost=1.71.0 \
                numpy pillow eigen pandas matplotlib-base \
                qt=5.9.7 cairo
            conda activate rdkit_build
            conda install -c conda-forge nbval ipykernel>=6.0 libstdcxx-ng=12
      - name: Cmake
        shell: bash
        run: |
            source ${CONDA}/etc/profile.d/conda.sh
            conda activate rdkit_build
            mkdir build && cd build && \
            cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DRDK_INSTALL_INTREE=ON \
            -DRDK_INSTALL_STATIC_LIBS=OFF \
            -DRDK_BUILD_CPP_TESTS=ON \
            -DRDK_BUILD_PYTHON_WRAPPERS=ON \
            -DRDK_USE_BOOST_REGEX=ON \
            -DRDK_BUILD_COORDGEN_SUPPORT=ON \
            -DRDK_BUILD_MAEPARSER_SUPPORT=ON \
            -DRDK_OPTIMIZE_POPCNT=ON \
            -DRDK_BUILD_TEST_GZIP=ON \
            -DRDK_BUILD_FREESASA_SUPPORT=ON \
            -DRDK_BUILD_AVALON_SUPPORT=ON \
            -DRDK_BUILD_INCHI_SUPPORT=ON \
            -DRDK_BUILD_YAEHMOP_SUPPORT=ON \
            -DRDK_BUILD_XYZ2MOL_SUPPORT=ON \
            -DRDK_BUILD_CAIRO_SUPPORT=ON \
            -DRDK_BUILD_QT_SUPPORT=ON \
            -DQt5_DIR=/usr/lib/x86_64-linux-gnu/cmake/Qt5 \
            -DRDK_BUILD_SWIG_WRAPPERS=OFF \
            -DRDK_SWIG_STATIC=OFF \
            -DRDK_BUILD_THREADSAFE_SSS=ON \
            -DRDK_TEST_MULTITHREADED=ON \
            -DRDK_BUILD_CFFI_LIB=ON \
            -DBoost_NO_SYSTEM_PATHS=ON \
            -DBoost_NO_BOOST_CMAKE=TRUE \
            -DRDK_BOOST_PYTHON3_NAME=$(python_name) \
            -DPYTHON_EXECUTABLE=${CONDA_PREFIX}/bin/python3 \
            -DCMAKE_INCLUDE_PATH="${CONDA_PREFIX}/include" \
            -DCMAKE_LIBRARY_PATH="${CONDA_PREFIX}/lib"
      - name: Build and install
        shell: bash
        run: |      
            source ${CONDA}/etc/profile.d/conda.sh
            conda activate rdkit_build
            cd build
            make -j$(nproc) install
      - name: Python tests
        shell: bash
        run: |
            source ${CONDA}/etc/profile.d/conda.sh
            conda activate rdkit_build
            export RDBASE=`pwd`
            export PYTHONPATH=${RDBASE}:${PYTHONPATH}
            export LD_LIBRARY_PATH=${RDBASE}/lib:${CONDA_PREFIX}/lib:${LD_LIBRARY_PATH}
            echo "LD_LIBRARY_PATH: " $LD_LIBRARY_PATH
            export QT_QPA_PLATFORM='offscreen'
            cd build
            ctest -j$(nproc) --output-on-failure -T Test
      - name: Test results
        shell: bash
        if: always()
        run: |
          cat /home/runner/work/rdkit-internal/rdkit-internal/build/Testing/Temporary/LastTest.log
      - name: Documentation tests
        shell: bash
        run: |
            source ${CONDA}/etc/profile.d/conda.sh
            conda activate rdkit_build
            conda install ipython matplotlib-base 
            conda install -c conda-forge sphinx myst-parser
            export RDBASE=`pwd`
            export PYTHONPATH=${RDBASE}:${PYTHONPATH}
            export LD_LIBRARY_PATH=${RDBASE}/lib:${LD_LIBRARY_PATH}
            export QT_QPA_PLATFORM='offscreen'
            cd Docs/Book
            make doctest
      - name: Publish Normal Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
            check_name: Normal build results
            check_run_annotations_branch: master
            report_individual_runs: true
            junit_files: |
              build/Testing/**/Test.xml

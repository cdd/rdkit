name: Build the cartridge and package it

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on:
      labels: ubuntu-latest-16-cores
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup build environment
        shell: bash
        run: |
            sudo apt-get update
            sudo apt-get remove postgresql postgresql-common postgresql-client-common
            sudo apt purge postgresql postgresql-common postgresql-client-common
            sudo apt-get install -y libboost-all-dev postgresql-common postgresql-14 postgresql-server-dev-14
            echo "add postgres user"
            sudo -u postgres createuser -s `whoami`
      - name: Cmake
        shell: bash
        run: |
            mkdir build && cd build && \
            cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DRDK_INSTALL_INTREE=ON \
            -DRDK_BUILD_CPP_TESTS=OFF \
            -DRDK_BUILD_PYTHON_WRAPPERS=OFF \
            -DRDK_USE_BOOST_REGEX=OFF \
            -DRDK_BUILD_COORDGEN_SUPPORT=ON \
            -DRDK_BUILD_MAEPARSER_SUPPORT=ON \
            -DRDK_OPTIMIZE_POPCNT=ON \
            -DRDK_BUILD_TEST_GZIP=ON \
            -DRDK_BUILD_AVALON_SUPPORT=ON \
            -DRDK_BUILD_INCHI_SUPPORT=ON \
            -DRDK_BUILD_SWIG_WRAPPERS=OFF \
            -DRDK_BUILD_THREADSAFE_SSS=ON \
            -DRDK_TEST_MULTITHREADED=ON \
            -DRDK_BUILD_PGSQL=ON \
            -DPostgreSQL_CONFIG=/usr/bin/pg_config
      - name: Build and install
        shell: bash
        run: |
            cd build
            make -j$(nproc) install
            sudo sh ./Code/PgSQL/rdkit/pgsql_install.sh
      - name: Test
        shell: bash
        run: |
            cd build
            sh ./Code/PgSQL/rdkit/pgsql_regress.sh
            if [ -e ./Code/PgSQL/rdkit/regression.diffs ]
            then
              cat ./Code/PgSQL/rdkit/regression.diffs
              exit 1
            fi
      - name: version
        run: echo "version=${{ github.sha }}" >> $GITHUB_OUTPUT
        id: version
      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          mkdir /tmp/content
          mkdir -p /tmp/content/usr/share/postgresql/14/extension /tmp/content/usr/lib/postgresql/14/lib
          cp ./build/Code/PgSQL/rdkit/rdkit--4.3.0.sql               /tmp/content/usr/share/postgresql/14/extension
          cp ./Code/PgSQL/rdkit/rdkit.control                        /tmp/content/usr/share/postgresql/14/extension
          cp ./build/Code/PgSQL/rdkit/update_sql/rdkit--3.8--4.0.sql /tmp/content/usr/share/postgresql/14/extension
          cp ./build/Code/PgSQL/rdkit/update_sql/rdkit--4.0--4.1.sql /tmp/content/usr/share/postgresql/14/extension
          cp ./build/Code/PgSQL/rdkit/librdkit.so                    /tmp/content/usr/lib/postgresql/14/lib/rdkit.so
          echo "filename=pgsql-rdkit-cartridge.tgz" >> $GITHUB_OUTPUT
      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: /tmp/content

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}
      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title "v${{ needs.build.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )"
